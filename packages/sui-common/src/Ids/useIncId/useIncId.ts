import * as React from 'react';

/**
 * Auto-incrementing Ids used in cases where the outcomes need to be deterministic i.e. hydration.
 *
 * @description This hook provides an auto-incrementing id, useful for hydrating DOM elements with unique ids.
 * @param {IncIdProps | string} props - Optional props or a single string value representing the initial id.
 * @returns {() => string} A function that generates a new id each time it is called.
 */
export default function useIncId(props?: IncIdProps | string): () => string {
  const defaultProps = { length: 3 };

  /**
   * If props is a string, convert it to an object with the default properties and assign it to id.
   * Otherwise, merge props with the default properties and assign them to the props object.
   */
  if (typeof props === 'string') {
    props = {
      ...defaultProps,
      id: props as string,
    };
  } else {
    props = {
      ...defaultProps,
      ...props as IncIdProps,
    };
  }

  const { id, length, prefix } = props;
  const incrementId = prefix ? `${prefix}-${id}` : id;

  /**
   * Create a function to generate a new id by appending a value padded with leading zeros.
   *
   * @param {string} val - The value to be appended to the incrementId.
   * @returns {string} A new id generated by appending the value to the incrementId and padding it with leading zeros.
   */
  const createId = React.useCallback(
    (val: string) => {
      return `${incrementId}-${val.padStart(length, '0')}`;
    },
    [incrementId, length]
  );

  /**
   * Create a counter to track increments.
   *
   * @type {React.RefObject<number>}
   */
  const counterRef = React.useRef(0);

  /**
   * A function that generates a new id by incrementing the counter and appending it to the createId.
   *
   * @returns {string} A new id generated by calling createId with the next value from the counter.
   */
  const incrementFunc: IncrementFunc = (React.useCallback(() => {
    const nextId = String(counterRef.current);
    counterRef.current += 1; // Increment counter
    return createId(nextId);
  }, [createId])) as IncrementFunc;

  /**
   * A function that increments the counter by a specified amount and generates a new id using the createId.
   *
   * @param {number} step - The number of increments to apply to the counter.
   * @returns {string} A new id generated by calling createId with the incremented value from the counter.
   */
  incrementFunc.by = React.useCallback((step: number) => {
    const nextId = String(counterRef.current);
    counterRef.current += step; // Increment counter
    return createId(nextId);
  }, [createId]) as IncrementFunc;

  /**
   * Return a function that generates a new id each time it is called.
   *
   * @returns {() => string} A function that calls the incrementFunc to generate a new id.
   */
  return incrementFunc;
}