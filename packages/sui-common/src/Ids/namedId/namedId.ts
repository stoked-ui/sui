/**
 * Generates a base64 encoded representation of a random byte string of the specified length.
 * 
 * @param {number} length The length of the byte string to generate.
 * @returns {string} A base64 encoded representation of the generated byte string.
 */
export function randomBytes(length: number): string {
  const bytes = new Uint8Array(length);
  for (let i = 0; i < length; i += 1) {
    bytes[i] = Math.floor(Math.random() * 256);
  }
  return Array.from(bytes)
    .map(byte => byte.toString(16).padStart(2, '0'))
    .join('').substring(0, length);
}

/**
 * Interface for the props of the namedId function.
 * 
 * @property {string} [id] The ID to use for the named ID. Defaults to ''.
 * @property {number} [length=7] The length of the random bytes to generate. Defaults to 7.
 * @property {string} [prefix] The prefix to use before the generated ID.
 * @property {string} [suffix] The suffix to append after the generated ID.
 */
interface NamedIdProps {
  /**
   * The ID to use for the named ID.
   *
   * @default ''
   */
  id?: string;
  /**
   * The length of the random bytes to generate.
   *
   * @default 7
   */
  length?: number;
  /**
   * The prefix to use before the generated ID.
   */
  prefix?: string;
  /**
   * The suffix to append after the generated ID.
   */
  suffix?: string;
}

/**
 * Generates a unique named ID with optional prefix and suffix.
 * 
 * @param {NamedIdProps | string} props The props or the ID to use. If it's an object, its properties
 *     are used to generate the ID. Otherwise, it's used as is.
 * @returns {string} A generated named ID.
 */
export default function namedId(props?: NamedIdProps | string) {
  let id = 'id';
  let length = 7;
  let prefix: string | undefined;
  let suffix: string | undefined;

  /**
   * Merges the props and initializes variables.
   *
   * If `props` is a string, it's used as the ID. Otherwise, it's merged with
   * the default values to form the namedIdProps object.
   */
  if (props) {
    if (typeof props === 'string') {
      id = props as string;
    } else if (props && props as NamedIdProps) {
      const namedProps = props as NamedIdProps;
      if (namedProps.id) {
        id = namedProps.id
      }
      if (namedProps.length) {
        length = namedProps.length
      }
      prefix = namedProps.prefix;
      suffix = namedProps.suffix;
    }
  }

  let start = prefix ? `${prefix}-${id}` : id;
  start = suffix ? `${start}-${suffix}` : start;

  /**
   * Generates a random byte string of the specified length and returns
   * it prefixed with the generated ID.
   *
   * @throws {TypeError} If `length` is not a positive integer.
   */
  return `${start}-${randomBytes(length!)}`;
}