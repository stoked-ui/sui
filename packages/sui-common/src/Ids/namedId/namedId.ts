/**
 * Generates a random string of bytes
 *
 * @param {number} length The number of bytes to generate
 * @returns {string} A hexadecimal string representation of the generated bytes
 */
export function randomBytes(length: number): string {
  const bytes = new Uint8Array(length);
  for (let i = 0; i < length; i += 1) {
    bytes[i] = Math.floor(Math.random() * 256);
  }
  return Array.from(bytes)
  .map(byte => byte.toString(16).padStart(2, '0'))
  .join('').substring(0, length);
}

/**
 * NamedId component
 *
 * @param {NamedIdProps | string} props Optional props object or string value
 * @returns {string} The generated named id
 */
export default function namedId(props?: NamedIdProps | string) {
  let id = 'id';
  let length = 7;
  let prefix: string | undefined;
  let suffix: string | undefined;

  /**
   * Parses props object or string value into id, length, prefix, and suffix
   */
  if (props) {
    if (typeof props === 'string') {
      id = props as string;
    } else if (props && props as NamedIdProps) {
      const namedProps = props as NamedIdProps;
      if (namedProps.id) {
        id = namedProps.id
      }
      if (namedProps.length) {
        length = namedProps.length
      }
      prefix = namedProps.prefix;
      suffix = namedProps.suffix;
    }
  }

  /**
   * Constructs the final id string by appending prefix, id, and suffix
   */
  let start = prefix ? `${prefix}-${id}` : id;
  start = suffix ? `${start}-${suffix}` : start;

  return `${start}-${randomBytes(length!)}`;
}