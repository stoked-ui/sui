{
  "componentDescription": "",
  "propDescriptions": {
    "actions": {
      "description": "A ref with imperative actions. It allows to select the first or last menu item."
    },
    "color": {
      "description": "The color of the component. It supports those theme colors that make sense for this component."
    },
    "component": {
      "description": "The component used for the root node. Either a string to use a HTML element or a component."
    },
    "disablePortal": {
      "description": "The <code>children</code> will be under the DOM hierarchy of the parent component."
    },
    "invertedColors": {
      "description": "If <code>true</code>, the children with an implicit color prop invert their colors to match the component&#39;s variant and color."
    },
    "keepMounted": {
      "description": "Always keep the children in the DOM. This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Popper."
    },
    "modifiers": {
      "description": "Popper.js is based on a &quot;plugin-like&quot; architecture, most of its features are fully encapsulated &quot;modifiers&quot;.<br>A modifier is a function that is called each time Popper.js needs to compute the position of the popper. For this reason, modifiers should be very performant to avoid bottlenecks. To learn how to create a modifier, <a href=\"https://popper.js.org/docs/v2/modifiers/\">read the modifiers documentation</a>."
    },
    "onClose": { "description": "Triggered when focus leaves the menu and the menu should close." },
    "onItemsChange": {
      "description": "Function called when the items displayed in the menu change."
    },
    "open": { "description": "Controls whether the menu is displayed." },
    "size": {
      "description": "The size of the component (affect other nested list* components because the <code>Menu</code> inherits <code>List</code>)."
    },
    "slotProps": { "description": "The props used for each slot inside." },
    "slots": { "description": "The components used for each slot inside." },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles."
    },
    "variant": {
      "description": "The <a href=\"https://mui.com/joy-ui/main-features/global-variants/\">global variant</a> to use."
    }
  },
  "classDescriptions": {
    "root": { "description": "Classname applied to the root element." },
    "listbox": { "description": "Classname applied to the listbox element." },
    "expanded": { "description": "Classname applied to the root element when the menu open." },
    "colorPrimary": {
      "description": "Classname applied to the root element if <code>color=&quot;primary&quot;</code>."
    },
    "colorNeutral": {
      "description": "Classname applied to the root element if <code>color=&quot;neutral&quot;</code>."
    },
    "colorDanger": {
      "description": "Classname applied to the root element if <code>color=&quot;danger&quot;</code>."
    },
    "colorSuccess": {
      "description": "Classname applied to the root element if <code>color=&quot;success&quot;</code>."
    },
    "colorWarning": {
      "description": "Classname applied to the root element if <code>color=&quot;warning&quot;</code>."
    },
    "colorContext": {
      "description": "Class name applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "color inversion is triggered"
    },
    "variantPlain": {
      "description": "Classname applied to the root element if <code>variant=&quot;plain&quot;</code>."
    },
    "variantOutlined": {
      "description": "Classname applied to the root element if <code>variant=&quot;outlined&quot;</code>."
    },
    "variantSoft": {
      "description": "Classname applied to the root element if <code>variant=&quot;soft&quot;</code>."
    },
    "variantSolid": {
      "description": "Classname applied to the root element if <code>variant=&quot;solid&quot;</code>."
    },
    "sizeSm": {
      "description": "Classname applied to the root element if <code>size=&quot;sm&quot;</code>."
    },
    "sizeMd": {
      "description": "Classname applied to the root element if <code>size=&quot;md&quot;</code>."
    },
    "sizeLg": {
      "description": "Classname applied to the root element if <code>size=&quot;lg&quot;</code>."
    }
  },
  "slotDescriptions": { "root": "The component that renders the root." }
}
