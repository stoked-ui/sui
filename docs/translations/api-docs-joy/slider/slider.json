{
  "componentDescription": "",
  "propDescriptions": {
    "aria-label": { "description": "The label of the slider." },
    "aria-valuetext": {
      "description": "A string value that provides a user-friendly name for the current value of the slider."
    },
    "classes": { "description": "Override or extend the styles applied to the component." },
    "color": {
      "description": "The color of the component. It supports those theme colors that make sense for this component."
    },
    "component": {
      "description": "The component used for the root node. Either a string to use a HTML element or a component."
    },
    "defaultValue": {
      "description": "The default value. Use when the component is not controlled."
    },
    "disabled": { "description": "If <code>true</code>, the component is disabled." },
    "disableSwap": {
      "description": "If <code>true</code>, the active thumb doesn&#39;t swap when moving pointer over a thumb while dragging another thumb."
    },
    "getAriaLabel": {
      "description": "Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider. This is important for screen reader users.",
      "typeDescriptions": { "index": "The thumb label&#39;s index to format." }
    },
    "getAriaValueText": {
      "description": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider. This is important for screen reader users.",
      "typeDescriptions": {
        "value": "The thumb label&#39;s value to format.",
        "index": "The thumb label&#39;s index to format."
      }
    },
    "isRtl": {
      "description": "If <code>true</code> the Slider will be rendered right-to-left (with the lowest value on the right-hand side)."
    },
    "marks": {
      "description": "Marks indicate predetermined values to which the user can move the slider. If <code>true</code> the marks are spaced according the value of the <code>step</code> prop. If an array, it should contain objects with <code>value</code> and an optional <code>label</code> keys."
    },
    "max": {
      "description": "The maximum allowed value of the slider. Should not be equal to min."
    },
    "min": {
      "description": "The minimum allowed value of the slider. Should not be equal to max."
    },
    "name": { "description": "Name attribute of the hidden <code>input</code> element." },
    "onChange": {
      "description": "Callback function that is fired when the slider&#39;s value changed.",
      "typeDescriptions": {
        "event": "The event source of the callback. You can pull out the new value by accessing <code>event.target.value</code> (any). <strong>Warning</strong>: This is a generic event not a change event.",
        "value": "The new value.",
        "activeThumb": "Index of the currently moved thumb."
      }
    },
    "onChangeCommitted": {
      "description": "Callback function that is fired when the <code>mouseup</code> is triggered.",
      "typeDescriptions": {
        "event": "The event source of the callback. <strong>Warning</strong>: This is a generic event not a change event.",
        "value": "The new value."
      }
    },
    "orientation": { "description": "The component orientation." },
    "scale": { "description": "A transformation function, to change the scale of the slider." },
    "size": {
      "description": "The size of the component. It accepts theme values between &#39;sm&#39; and &#39;lg&#39;."
    },
    "slotProps": { "description": "The props used for each slot inside." },
    "slots": { "description": "The components used for each slot inside." },
    "step": {
      "description": "The granularity with which the slider can step through values. (A &quot;discrete&quot; slider.) The <code>min</code> prop serves as the origin for the valid values. We recommend (max - min) to be evenly divisible by the step.<br>When step is <code>null</code>, the thumb can only be slid onto marks provided with the <code>marks</code> prop."
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles."
    },
    "tabIndex": { "description": "Tab index attribute of the hidden <code>input</code> element." },
    "track": {
      "description": "<p>The track presentation:</p>\n<ul>\n<li><code>normal</code> the track will render a bar representing the slider value.</li>\n<li><code>inverted</code> the track will render a bar representing the remaining slider value.</li>\n<li><code>false</code> the track will render without a bar.</li>\n</ul>\n"
    },
    "value": {
      "description": "The value of the slider. For ranged sliders, provide an array with two values."
    },
    "valueLabelDisplay": {
      "description": "<p>Controls when the value label is displayed:</p>\n<ul>\n<li><code>auto</code> the value label will display when the thumb is hovered or focused.</li>\n<li><code>on</code> will display persistently.</li>\n<li><code>off</code> will never display.</li>\n</ul>\n"
    },
    "valueLabelFormat": {
      "description": "The format function the value label&#39;s value.<br>When a function is provided, it should have the following signature:<br>- {number} value The value label&#39;s value to format - {number} index The value label&#39;s index to format"
    },
    "variant": {
      "description": "The <a href=\"https://mui.com/joy-ui/main-features/global-variants/\">global variant</a> to use."
    }
  },
  "classDescriptions": {
    "root": { "description": "Class name applied to the root element." },
    "marked": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>marks</code> is provided with at least one label"
    },
    "vertical": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>orientation=\"vertical\"</code>"
    },
    "disabled": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root and thumb element",
      "conditions": "<code>disabled={true}</code>"
    },
    "dragging": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root",
      "conditions": "a thumb is being dragged"
    },
    "focusVisible": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the thumb element",
      "conditions": "it has keyboard focused"
    },
    "rail": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the rail element"
    },
    "track": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the track element"
    },
    "trackFalse": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>track={false}</code>"
    },
    "trackInverted": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>track=\"inverted\"</code>"
    },
    "thumb": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the thumb element"
    },
    "valueLabel": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the thumb label element"
    },
    "valueLabelOpen": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the thumb label element",
      "conditions": "it&#39;s open"
    },
    "mark": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the mark element"
    },
    "markActive": {
      "description": "Class name applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the mark element",
      "conditions": "it is active"
    },
    "markLabel": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the mark label element"
    },
    "colorPrimary": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"primary\"</code>"
    },
    "colorNeutral": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"neutral\"</code>"
    },
    "colorDanger": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"danger\"</code>"
    },
    "colorSuccess": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"success\"</code>"
    },
    "colorWarning": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"warning\"</code>"
    },
    "colorContext": {
      "description": "Class name applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "color inversion is triggered"
    },
    "variantPlain": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"plain\"</code>"
    },
    "variantOutlined": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"outlined\"</code>"
    },
    "variantSoft": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"soft\"</code>"
    },
    "variantSolid": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"solid\"</code>"
    },
    "sizeSm": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"sm\"</code>"
    },
    "sizeMd": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"md\"</code>"
    },
    "sizeLg": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"lg\"</code>"
    },
    "input": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the input element"
    }
  },
  "slotDescriptions": {
    "root": "The component that renders the root.",
    "track": "The component that renders the track.",
    "rail": "The component that renders the rail.",
    "thumb": "The component that renders the thumb.",
    "mark": "The component that renders the mark.",
    "markLabel": "The component that renders the mark label.",
    "valueLabel": "The component that renders the value label.",
    "input": "The component that renders the input."
  }
}
